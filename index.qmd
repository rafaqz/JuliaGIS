---
title: "Julia for GIS"
subtitle: "Why Julia for geospatial work?"
author:
  - name: Rafael Schouten
    orcid:
    email: rafaelschouten@gmail.com
    affiliation:
      - name: NINA
date: "04-12-2024"
engine: julia
format:
  revealjs:
    theme: [simple, style.scss] # beige blood dark default league moon night serif simple sky solarized
    incremental: true
    toc: true
    toc-depth: 1
    slide-number: true
    overview: true
    code-line-numbers: false
    highlight-style: ayu
execute:
    echo: true
---

# What is Julia?

- A relatively new language for scientific computing
- Designed for math and science, and performance
- Most developed for modelling and differential equations

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSxkyFOO9EDHT_JRIVtk8DzF7ik0cx--MCtjA&s)


# Some syntax 

```{julia}
x = 1
x * 2
```

## Vectors and Arrays (lists)

```{julia}
V = [10, 20, 30, 40, 50]
V[5]
```

Broadcasts (like apply/lapply) :
```{julia}
V .* 2
```
{{< pagebreak >}}

## Functions

```{julia}
f(x) = 2x
f(4)
```
Broadcast functions over arrays:
```{julia}
f.([1, 2, 3])
```
---

Multiline functions
```{julia}
function add(x, y)
    x + y
end

add(2, 3)
```

```{julia}
add(2.0, 3)
```

```{julia}
add([1, 2, 3], [4, 5, 6])
```

# Types

Julia doesn't hide number types from you how R does:

```{julia}
x = 1.0
typeof(x * 2)
```

```{julia}
x = 1
typeof(x * 2)
```

This is important for performance, but needs some getting used to.

# GIS

[JuliaGeo](https://github.com/JuliaGeo)

[Julia Geocompx book](https://jl.geocompx.org/)

Notice that this is different to the first example:

## Common interface packages:

- GeoInterface.jl: makes common interface for geospatial objects, all the other packages build on it.
- DiskArrays.jl: lazy loading and out-of-core operations on large raster data. All raster packages use it.
- CommonDataModel.jl: CF standards for loading NetCDF, Zarr and Grib files.

# [GeometryOps.jl](https://github.com/JuliaGeo/GeometryOps.jl)

(quite new) spatial operations on GeoInterface.jl compatible vector/geometry data

![GeometryOps performance](https://github.com/JuliaGeo/GeometryOps.jl/assets/32143268/0be8672c-c90f-4e1d-81c5-8522317c5e29)

# [GeoDataFrames.jl](https://github.com/evetion/GeoDataFrames.jl)

Load vector datasets as a DataFrames.jl dataframe.

---

There is also:
- LibGEOS.jl for geos 
- ArchGDAL.jl for gdal

And native packages:
- Shapefile.jl
- GeoJSON.jl
- GeoParquet.jl
etc...

# [Rasters.jl](https://github.com/rafaqz/Rasters.jl)

Multidimensional raster data and operations. Somewhere between Rs `stars` and pythons `XArray`

```{julia}
#| echo: false
if !haskey(ENV, "RASTERDATASOURCES_PATH")
    ENV["RASTERDATASOURCES_PATH"] = ".";
end
```


## File Read/Write Backends

File types                      | Package
------------------------------- | ----------
GeoTIFF and everything else     | ArchGDAL.jl
Netcdf/hdf5                     | NCDatasets.jl
Grib (read only)                | GRIBDatasets.jl
Zarr (read only)                | ZarrDatasets.jl
R grd (simple Mmap data from R) | native


## Backend detection

Backend detected in constructors:

```julia
# Single array
rast = Raster("myraster.tif")
rast = Raster("myraster.nc")

# Multi-layered stacks
st = RasterStack("mystack.nc")
st = RasterStack("mystack.grib")
```

# Load a file

Lazily 

```{julia}
using Rasters, RasterDataSources, ArchGDAL, Dates
filename = getraster(WorldClim{Future{BioClim,CMIP6,MRI_ESM2_0,SSP126}}, 5; date=Date(2050), res = "10m")
rast = Raster(filename; lazy=true)
```
---

Still lazy after broadcasts:
```{julia}
rast10 = rast .* 10
rast10
```
---

Reads from disk/network on `getindex`:

```{julia}
rast10[X=100 .. 135, Y=20 .. 40, Band=1]
```

## RasterDataSources.jl integration

\
Load a raster from RasterDataSources.jl directly:

```{julia}
bioclim5 = Raster(WorldClim{BioClim}, 5)
```

# Plotting

## Makie.jl

Standard plotting

```{julia}
#| echo: false
using CairoMakie
CairoMakie.activate!(type = "png")
```

```{julia}
using CairoMakie
Makie.plot(bioclim5)
```

## GeoMakie.jl

Projected plotting

```{julia}
using GeoMakie, NaturalEarth, DataFrames
countries = naturalearth("ne_10m_admin_0_countries") |> DataFrame
norway = subset(countries, :NAME => ByRow(==("Norway"))).geometry
fig = Figure();
ga = GeoAxis(fig[1, 1]; dest="+proj=ortho +lon_0=19 +lat_0=72")
Makie.heatmap!(ga, bioclim5; colormap=:magma)
Makie.plot!(ga, norway; color=:black, strokewidth=1)
fig
```